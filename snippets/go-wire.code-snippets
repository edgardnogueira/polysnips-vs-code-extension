{
  "Wire Container": {
    "prefix": "fs-go-wire-container",
    "body": [
      "//go:build wireinject",
      "// +build wireinject",
      "",
      "package ${1:di}",
      "",
      "import (",
      "  \"github.com/google/wire\"",
      "  \"${2:your_module}/internal/infra/database\"",
      "  \"${2:your_module}/internal/infra/repository\"",
      "  \"${2:your_module}/internal/usecase\"",
      "  \"${2:your_module}/internal/api/handler\"",
      ")",
      "",
      "type ${3:App} struct {",
      "  ${4:UserHandler} *handler.${4:UserHandler}",
      "  // Adicione outros handlers conforme necessário",
      "}",
      "",
      "func Initialize${3:App}() (*${3:App}, error) {",
      "  wire.Build(",
      "    wire.Struct(new(${3:App}), \"*\"),",
      "    database.ProvideDB,",
      "    repository.ProvideRepositories,",
      "    usecase.ProvideUseCases,",
      "    handler.ProvideHandlers,",
      "  )",
      "  return &${3:App}{}, nil",
      "}"
    ],
    "description": "Cria um container Wire para injeção de dependência"
  },

  "Wire Provider Set": {
    "prefix": "fs-go-wire-provider-set",
    "body": [
      "package ${1:package}",
      "",
      "import (",
      "  \"github.com/google/wire\"",
      ")",
      "",
      "// ${2:Package}Set é um conjunto de providers para ${3:descrição}",
      "var ${2:Package}Set = wire.NewSet(",
      "  Provide${4:Service},",
      "  Provide${5:Repository},",
      "  wire.Bind(new(${6:IService}), new(*${7:ServiceImpl})),",
      "  wire.Bind(new(${8:IRepository}), new(*${9:RepositoryImpl})),",
      ")",
      "",
      "// Exemplo de uso:",
      "// var userSet = wire.NewSet(",
      "//   NewUserRepository,",
      "//   NewUserService,",
      "//   wire.Bind(new(UserRepository), new(*UserRepositoryImpl)),",
      "//   wire.Bind(new(UserService), new(*UserServiceImpl)),",
      "// )"
    ],
    "description": "Cria um provider set para Wire"
  },

  "Wire Provider Function": {
    "prefix": "fs-go-wire-provider",
    "body": [
      "// Provide${1:Service} cria e retorna uma nova instância de ${1:Service}",
      "func Provide${1:Service}(",
      "  ${2:repo} ${3:Repository},",
      "  ${4:logger} ${5:Logger},",
      "  ${6:config} ${7:Config},",
      ") ${8:Interface} {",
      "  return &${9:Implementation}{",
      "    ${2:repo}:   ${2:repo},",
      "    ${4:logger}: ${4:logger},",
      "    ${6:config}: ${6:config},",
      "  }",
      "}",
      "",
      "// Exemplo de uso:",
      "// func ProvideUserService(repo UserRepository, logger Logger) UserService {",
      "//   return &UserServiceImpl{",
      "//     repo:   repo,",
      "//     logger: logger,",
      "//   }",
      "// }"
    ],
    "description": "Cria uma função provider para Wire"
  },

  "Wire Complete Setup": {
    "prefix": "fs-go-wire-setup",
    "body": [
      "package di",
      "",
      "import (",
      "  \"github.com/google/wire\"",
      "  \"${1:your_module}/internal/domain/repository\"",
      "  \"${1:your_module}/internal/domain/service\"",
      "  \"${1:your_module}/internal/infra/database\"",
      "  \"${1:your_module}/internal/infra/repository\"",
      "  \"${1:your_module}/internal/usecase\"",
      "  \"${1:your_module}/internal/api/handler\"",
      "  \"${1:your_module}/internal/infra/config\"",
      "  \"${1:your_module}/internal/infra/logger\"",
      ")",
      "",
      "// ConfigSet provê configurações da aplicação",
      "var configSet = wire.NewSet(",
      "  config.NewConfig,",
      "  logger.NewLogger,",
      ")",
      "",
      "// DatabaseSet provê conexões e transações",
      "var databaseSet = wire.NewSet(",
      "  database.NewDB,",
      "  database.NewTransaction,",
      ")",
      "",
      "// RepositorySet provê implementações dos repositories",
      "var repositorySet = wire.NewSet(",
      "  repository.New${2:User}Repository,",
      "  wire.Bind(new(repository.${2:User}Repository), new(*repository.${2:User}RepositoryImpl)),",
      "  // Adicione outros repositories",
      ")",
      "",
      "// ServiceSet provê implementações dos services",
      "var serviceSet = wire.NewSet(",
      "  service.New${2:User}Service,",
      "  wire.Bind(new(service.${2:User}Service), new(*service.${2:User}ServiceImpl)),",
      "  // Adicione outros services",
      ")",
      "",
      "// UseCaseSet provê implementações dos use cases",
      "var usecaseSet = wire.NewSet(",
      "  usecase.New${2:User}UseCase,",
      "  wire.Bind(new(usecase.${2:User}UseCase), new(*usecase.${2:User}UseCaseImpl)),",
      "  // Adicione outros use cases",
      ")",
      "",
      "// HandlerSet provê implementações dos handlers",
      "var handlerSet = wire.NewSet(",
      "  handler.New${2:User}Handler,",
      "  // Adicione outros handlers",
      ")",
      "",
      "// App é o container principal da aplicação",
      "type App struct {",
      "  Config *config.Config",
      "  Logger logger.Logger",
      "  DB     *database.DB",
      "  ${2:User}Handler *handler.${2:User}Handler",
      "  // Adicione outros handlers necessários",
      "}",
      "",
      "// InitializeApp inicializa a aplicação com todas as dependências",
      "func InitializeApp() (*App, error) {",
      "  wire.Build(",
      "    wire.Struct(new(App), \"*\"),",
      "    configSet,",
      "    databaseSet,",
      "    repositorySet,",
      "    serviceSet,",
      "    usecaseSet,",
      "    handlerSet,",
      "  )",
      "  return &App{}, nil",
      "}"
    ],
    "description": "Cria uma configuração completa do Wire com todas as camadas"
  },

  "Wire Options": {
    "prefix": "fs-go-wire-options",
    "body": [
      "// ${1:Service}Options contém as opções de configuração para ${1:Service}",
      "type ${1:Service}Options struct {",
      "  ${2:Config}  *config.${2:Config}",
      "  ${3:Logger}  *logger.${3:Logger}",
      "  ${4:Timeout} time.Duration",
      "  ${5:Cache}   bool",
      "  // Adicione outras opções",
      "}",
      "",
      "// ${1:Service}Option é uma função que configura ${1:Service}Options",
      "type ${1:Service}Option func(*${1:Service}Options)",
      "",
      "// Default${1:Service}Options retorna as opções padrão",
      "func Default${1:Service}Options() *${1:Service}Options {",
      "  return &${1:Service}Options{",
      "    ${4:Timeout}: 30 * time.Second,",
      "    ${5:Cache}:   true,",
      "  }",
      "}",
      "",
      "// With${2:Config} configura o ${2:Config}",
      "func With${2:Config}(config *config.${2:Config}) ${1:Service}Option {",
      "  return func(o *${1:Service}Options) {",
      "    o.${2:Config} = config",
      "  }",
      "}",
      "",
      "// With${3:Logger} configura o ${3:Logger}",
      "func With${3:Logger}(logger *logger.${3:Logger}) ${1:Service}Option {",
      "  return func(o *${1:Service}Options) {",
      "    o.${3:Logger} = logger",
      "  }",
      "}",
      "",
      "// With${4:Timeout} configura o timeout",
      "func With${4:Timeout}(timeout time.Duration) ${1:Service}Option {",
      "  return func(o *${1:Service}Options) {",
      "    o.${4:Timeout} = timeout",
      "  }",
      "}",
      "",
      "// With${5:Cache} habilita ou desabilita o cache",
      "func With${5:Cache}(enabled bool) ${1:Service}Option {",
      "  return func(o *${1:Service}Options) {",
      "    o.${5:Cache} = enabled",
      "  }",
      "}",
      "",
      "// New${1:Service} cria uma nova instância de ${1:Service} com as opções fornecidas",
      "func New${1:Service}(opts ...${1:Service}Option) *${1:Service} {",
      "  options := Default${1:Service}Options()",
      "",
      "  for _, opt := range opts {",
      "    opt(options)",
      "  }",
      "",
      "  return &${1:Service}{",
      "    config:  options.${2:Config},",
      "    logger:  options.${3:Logger},",
      "    timeout: options.${4:Timeout},",
      "    cache:   options.${5:Cache},",
      "  }",
      "}",
      "",
      "// Exemplo de uso:",
      "// service := NewUserService(",
      "//   WithConfig(cfg),",
      "//   WithLogger(logger),",
      "//   WithTimeout(5 * time.Second),",
      "//   WithCache(false),",
      "// )"
    ],
    "description": "Cria padrão de options para configuração flexível de dependências"
  }
}